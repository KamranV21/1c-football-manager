
#Область ПрограммныйИнтерфейс

Функция ПозицииПоСхеме(Схема) Экспорт
	
	Позиции = Новый Массив;
	
	Если Схема = Перечисления.ИгровыеСхемы.Схема442 Тогда 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник); 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);     
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);   
	ИначеЕсли Схема = Перечисления.ИгровыеСхемы.Схема442Ромб Тогда 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник); 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);     
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);  
	ИначеЕсли Схема = Перечисления.ИгровыеСхемы.Схема433 Тогда 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник); 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);     
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйИнсайд);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
	ИначеЕсли Схема = Перечисления.ИгровыеСхемы.Схема4231 Тогда 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник); 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);     
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий); 
	ИначеЕсли Схема = Перечисления.ИгровыеСхемы.Схема352 Тогда 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник); 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);     
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
	ИначеЕсли Схема = Перечисления.ИгровыеСхемы.Схема343 Тогда 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник); 
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);     
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ПравыйИнсайд);
		Позиции.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
	КонецЕсли;
	
	Возврат Позиции;

КонецФункции

Функция КлючевыеНавыкиПозиций() Экспорт
	
	КлючевыеНавыкиПозиций = Новый Соответствие;
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 11); 
	Навыки.Вставить("ИграРуками", 11);
	Навыки.Вставить("ОдинНаОдин", 11);
	Навыки.Вставить("Отбор", 0.01); 
	Навыки.Вставить("ВыборПозиции", 0.01); 
	Навыки.Вставить("Опека", 0.01);
	Навыки.Вставить("Пас", 0.36); 
	Навыки.Вставить("Скорость",0.01); 
	Навыки.Вставить("Техника", 0.01);
	Навыки.Вставить("ИграБезМяча", 0.01); 
	Навыки.Вставить("ВидениеПоля", 0.01); 
	Навыки.Вставить("Удар", 0.36); 
	Навыки.Вставить("Завершение", 0.01); 
	Навыки.Вставить("Дриблинг", 0.01); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.Вратарь, Навыки);

	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 11); 
	Навыки.Вставить("ВыборПозиции", 11); 
	Навыки.Вставить("Опека", 0.62);
	Навыки.Вставить("Пас", 0.31); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 0.62);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.001); 
	Навыки.Вставить("Завершение", 0.001); 
	Навыки.Вставить("Дриблинг", 0.31); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник, Навыки);

	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 11); 
	Навыки.Вставить("ВыборПозиции", 11); 
	Навыки.Вставить("Опека", 11);
	Навыки.Вставить("Пас", 0.93); 
	Навыки.Вставить("Скорость", 0.31); 
	Навыки.Вставить("Техника", 0.001);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.31); 
	Навыки.Вставить("Завершение", 0.31); 
	Навыки.Вставить("Дриблинг", 0.001); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 11); 
	Навыки.Вставить("ВыборПозиции", 11); 
	Навыки.Вставить("Опека", 0.31);
	Навыки.Вставить("Пас", 0.31); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 0.31);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.31); 
	Навыки.Вставить("Завершение", 0.31); 
	Навыки.Вставить("Дриблинг", 0.31); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ПравыйЗащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 10); 
	Навыки.Вставить("ВыборПозиции", 11); 
	Навыки.Вставить("Опека", 11);
	Навыки.Вставить("Пас",1.12); 
	Навыки.Вставить("Скорость", 0.31); 
	Навыки.Вставить("Техника", 0.31);
	Навыки.Вставить("ИграБезМяча", 0.81); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.31); 
	Навыки.Вставить("Завершение", 0.001); 
	Навыки.Вставить("Дриблинг", 0.31); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.31); 
	Навыки.Вставить("ВыборПозиции", 0.31); 
	Навыки.Вставить("Опека", 0.31);
	Навыки.Вставить("Пас", 11); 
	Навыки.Вставить("Скорость", 0.31); 
	Навыки.Вставить("Техника", 0.31);
	Навыки.Вставить("ИграБезМяча", 11); 
	Навыки.Вставить("ВидениеПоля", 11); 
	Навыки.Вставить("Удар", 0.31); 
	Навыки.Вставить("Завершение", 0.31); 
	Навыки.Вставить("Дриблинг", 0.31); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.001); 
	Навыки.Вставить("ВыборПозиции", 0.001); 
	Навыки.Вставить("Опека", 0.001);
	Навыки.Вставить("Пас", 11); 
	Навыки.Вставить("Скорость", 0.62); 
	Навыки.Вставить("Техника", 11);
	Навыки.Вставить("ИграБезМяча", 11); 
	Навыки.Вставить("ВидениеПоля", 11); 
	Навыки.Вставить("Удар", 0.62); 
	Навыки.Вставить("Завершение", 0.31); 
	Навыки.Вставить("Дриблинг", 1.62); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.001); 
	Навыки.Вставить("ВыборПозиции", 0.001); 
	Навыки.Вставить("Опека", 0.001);
	Навыки.Вставить("Пас", 1.23); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 11);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.31); 
	Навыки.Вставить("Завершение", 0.31); 
	Навыки.Вставить("Дриблинг", 11); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.001); 
	Навыки.Вставить("ВыборПозиции", 0.001); 
	Навыки.Вставить("Опека", 0.001);
	Навыки.Вставить("Пас", 1.23); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 11);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.31); 
	Навыки.Вставить("Завершение", 0.31); 
	Навыки.Вставить("Дриблинг", 11); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.001); 
	Навыки.Вставить("ВыборПозиции", 0.001); 
	Навыки.Вставить("Опека", 0.001);
	Навыки.Вставить("Пас", 0.62); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 11);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.62); 
	Навыки.Вставить("Завершение", 0.62); 
	Навыки.Вставить("Дриблинг", 11); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.001); 
	Навыки.Вставить("ВыборПозиции", 0.001); 
	Навыки.Вставить("Опека", 0.001);
	Навыки.Вставить("Пас", 0.62); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 11);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 0.62); 
	Навыки.Вставить("Завершение", 0.62); 
	Навыки.Вставить("Дриблинг", 11); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ПравыйИнсайд, Навыки);
	
	Навыки = Новый Структура; 
	Навыки.Вставить("Реакция", 0.001); 
	Навыки.Вставить("ИграРуками", 0.001);
	Навыки.Вставить("ОдинНаОдин", 0.001);
	Навыки.Вставить("Отбор", 0.001); 
	Навыки.Вставить("ВыборПозиции", 0.001); 
	Навыки.Вставить("Опека", 0.001);
	Навыки.Вставить("Пас", 0.62); 
	Навыки.Вставить("Скорость", 11); 
	Навыки.Вставить("Техника", 0.62);
	Навыки.Вставить("ИграБезМяча", 0.31); 
	Навыки.Вставить("ВидениеПоля", 0.31); 
	Навыки.Вставить("Удар", 11); 
	Навыки.Вставить("Завершение", 11); 
	Навыки.Вставить("Дриблинг", 0.62); 
	КлючевыеНавыкиПозиций.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий, Навыки);
	
	Возврат КлючевыеНавыкиПозиций;

КонецФункции

Процедура СимулироватьДействияТекущейИгровойДаты() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасписаниеЛиги.Лига КАК Лига,
	                      |	РасписаниеЛиги.Сезон КАК Сезон,      
	                      |	РасписаниеЛиги.ИгровойДень КАК ИгровойДень,
	                      |	РасписаниеЛиги.Хозяева КАК Хозяева,
	                      |	РасписаниеЛиги.Гости КАК Гости,
	                      |	ЕСТЬNULL(ФутбольныйМатч.Ссылка, ЗНАЧЕНИЕ(Документ.ФутбольныйМатч.ПустаяСсылка)) КАК Матч
	                      |ИЗ
	                      |	РегистрСведений.РасписаниеЛиги КАК РасписаниеЛиги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФутбольныйМатч КАК ФутбольныйМатч
	                      |		ПО РасписаниеЛиги.Лига = ФутбольныйМатч.Лига
	                      |			И РасписаниеЛиги.Сезон = ФутбольныйМатч.Сезон
	                      |			И РасписаниеЛиги.ИгровойДень = ФутбольныйМатч.ИгровойДень
	                      |			И РасписаниеЛиги.Хозяева = ФутбольныйМатч.Хозяева
	                      |			И РасписаниеЛиги.Гости = ФутбольныйМатч.Гости
	                      |ГДЕ
	                      |	РасписаниеЛиги.Дата = &ТекущаяИгроваяДата");
	Запрос.УстановитьПараметр("ТекущаяИгроваяДата", Константы.ИгроваяДата.Получить());	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			МатчОбъект = Документы.ФутбольныйМатч.СоздатьДокумент(); 
			МатчОбъект.Дата = Константы.ИгроваяДата.Получить();
			МатчОбъект.Лига = Выборка.Лига;
			МатчОбъект.Сезон = Выборка.Сезон;
			МатчОбъект.ИгровойДень = Выборка.ИгровойДень;
			МатчОбъект.Хозяева = Выборка.Хозяева;
			МатчОбъект.Гости = Выборка.Гости;
			ИгровыеМеханики.РазыгратьМатчНаСервере(МатчОбъект);
			МатчОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;          
		
		Константы.ИгроваяДата.Установить(Константы.ИгроваяДата.Получить() + 86400);    
		
		Трансферы.СимулироватьТрансфернуюАктивность();
		
		ОткрытьНовыеСезоны();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РазыгратьМатчНаСервере(Объект) Экспорт
	
	Объект.ОчкиХозяев = 0;
	Объект.ОчкиГостей = 0;
	Объект.ГолыХозяев = 0;
	Объект.ГолыГостей = 0;
	Объект.Голы.Очистить();
	
	НавыкиФутбольногоКлуба = НавыкиФутбольногоКлуба(Объект.Хозяева);
	КоэффициентыИгрыХозяев = КоэффициентыИгрыКоманды(НавыкиФутбольногоКлуба);
	СкорректироватьНавыкиКомандыПоТактическойСхеме(Объект.Хозяева, КоэффициентыИгрыХозяев);
		
	НавыкиФутбольногоКлуба = НавыкиФутбольногоКлуба(Объект.Гости);
	КоэффициентыИгрыГостей = КоэффициентыИгрыКоманды(НавыкиФутбольногоКлуба);
	СкорректироватьНавыкиКомандыПоТактическойСхеме(Объект.Гости, КоэффициентыИгрыХозяев);

	МинутВМатче = 90;
	
	Для Минута = 0 По МинутВМатче Цикл 
		
		КомандаВладеющаяМячом = КомандаВладеющаяМячом(Объект, КоэффициентыИгрыХозяев.Созидание, КоэффициентыИгрыГостей.Созидание);	
		
		СредняяВероятностьГолаВМинуту = СредняяВероятностьГолаВМинуту();  
		
		КоэффициентЗавершения = ?(КомандаВладеющаяМячом = Объект.Хозяева, КоэффициентыИгрыХозяев.Завершение, КоэффициентыИгрыГостей.Завершение);
		КоэффициентРазрушения = ?(КомандаВладеющаяМячом = Объект.Хозяева, КоэффициентыИгрыГостей.Разрушение, КоэффициентыИгрыХозяев.Разрушение);
		КоэффициентКорректировки = КоэффициентЗавершения - КоэффициентРазрушения;

		МасштабСжатия = 0.1;
		МаксимальнаяРазница = 99;
		ВероятностьГолаПоНавыкамКоманд = СредняяВероятностьГолаВМинуту + (КоэффициентКорректировки / МаксимальнаяРазница) * МасштабСжатия;

		ВероятностьГола = СлучайноеДробноеЧисло(0, 1, 1100);  
		
		Если ВероятностьГола < ВероятностьГолаПоНавыкамКоманд Тогда
				
			Гол = Объект.Голы.Добавить(); 
			Гол.Минута = Минута;
			Гол.ФутбольныйКлуб = КомандаВладеющаяМячом;    
			Гол.АвторГола = ВыбратьАвтораГола(КомандаВладеющаяМячом); 
			Гол.ГолеваяПередача = ВыбратьАвтораГолевойПередачи(КомандаВладеющаяМячом, Гол.АвторГола); 
			
			Если КомандаВладеющаяМячом = Объект.Хозяева Тогда
				Объект.ГолыХозяев = Объект.ГолыХозяев + 1;		
			Иначе
				Объект.ГолыГостей = Объект.ГолыГостей + 1;		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Объект.ГолыХозяев = Объект.ГолыГостей Тогда
		Объект.ОчкиХозяев = 1;	
		Объект.ОчкиГостей = 1;
	ИначеЕсли Объект.ГолыХозяев > Объект.ГолыГостей Тогда
		Объект.ОчкиХозяев = 3;
		Объект.ОчкиГостей = 0;
	Иначе
		Объект.ОчкиХозяев = 0;
		Объект.ОчкиГостей = 3;
	КонецЕсли;   
		
КонецПроцедуры

Функция ЗапросТурнирнаяТаблица(Лига, Сезон) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СоставЛиги.ФутбольныйКлуб КАК ФутбольныйКлуб,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ОчкиОборот, 0) КАК Очки,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ВыигрышиОборот, 0) КАК Выигрыши,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.НичьиОборот, 0) КАК Ничьи,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ПороженияОборот, 0) КАК Порожения,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ЗабитоОборот, 0) КАК Забито,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ПропущеноОборот, 0) КАК Пропущено,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.СыграноМатчейОборот, 0) КАК СыграноМатчей,
	                      |	ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ЗабитоОборот, 0) - ЕСТЬNULL(ТурнирнаяТаблицаОбороты.ПропущеноОборот, 0) КАК РазницаМячей
	                      |ИЗ
	                      |	РегистрСведений.СоставЛиги КАК СоставЛиги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТурнирнаяТаблица.Обороты КАК ТурнирнаяТаблицаОбороты
	                      |		ПО СоставЛиги.Сезон = ТурнирнаяТаблицаОбороты.Сезон
	                      |			И СоставЛиги.Лига = ТурнирнаяТаблицаОбороты.Лига
	                      |			И СоставЛиги.ФутбольныйКлуб = ТурнирнаяТаблицаОбороты.ФутбольныйКлуб
	                      |ГДЕ
	                      |	СоставЛиги.Лига = &Лига
	                      |	И СоставЛиги.Сезон = &Сезон
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Очки УБЫВ,
	                      |	РазницаМячей УБЫВ,
	                      |	Выигрыши УБЫВ,
	                      |	Забито УБЫВ");
	Запрос.УстановитьПараметр("Лига", Лига);
	Запрос.УстановитьПараметр("Сезон", Сезон);

	Возврат Запрос;
	
КонецФункции 

Процедура ОбновитьСтартовыеСоставыКоманд(ФутбольныйКлуб = Неопределено) Экспорт
	
	ФутбольныйКлубМенеджера = Константы.ФутбольныйКлубМенеджера.Получить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФутбольныеКлубы.Ссылка КАК ФутбольныйКлуб,
	                      |	Футболисты.Ссылка КАК Футболист,
	                      |	Футболисты.Позиция КАК Позиция,
	                      |	Футболисты.Рейтинг КАК Рейтинг
	                      |ИЗ
	                      |	Справочник.Футболисты КАК Футболисты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФутбольныеКлубы КАК ФутбольныеКлубы
	                      |		ПО Футболисты.ФутбольныйКлуб = ФутбольныеКлубы.Ссылка
	                      |ГДЕ
	                      |	(ФутбольныеКлубы.Ссылка = &ФутбольныйКлуб
	                      |			ИЛИ &ФутбольныйКлуб = НЕОПРЕДЕЛЕНО)
	                      |	И НЕ Футболисты.ЗавершилКарьеру
	                      |ИТОГИ ПО
	                      |	ФутбольныйКлуб");
	Запрос.УстановитьПараметр("ФутбольныйКлуб", ФутбольныйКлуб);
	
	ВыборкаФутбольныйКлуб = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ГруппыПоПозициям = ГруппыПоПозициям();
	
	Пока ВыборкаФутбольныйКлуб.Следующий() Цикл
		
		Если ФутбольныйКлуб = Неопределено И ВыборкаФутбольныйКлуб.ФутбольныйКлуб = ФутбольныйКлубМенеджера Тогда
			Продолжить;
		КонецЕсли;
		
		ФутбольныйКлубОбъект = ВыборкаФутбольныйКлуб.ФутбольныйКлуб.ПолучитьОбъект();
		
		Для Каждого Строка Из ФутбольныйКлубОбъект.СтартовыйСостав Цикл  
			Строка.Футболист = Справочники.Футболисты.ПустаяСсылка();
		КонецЦикла;
		
		Для Каждого Строка Из ФутбольныйКлубОбъект.СтартовыйСостав Цикл
			
			ЛучшийФутболистНаПозицию = Справочники.Футболисты.ПустаяСсылка(); 
			ЛучшийРейтингПозицию = 0; 
			
			// Ищем точно по позции
			Выборка = ВыборкаФутбольныйКлуб.Выбрать();
			Пока Выборка.НайтиСледующий(Новый Структура("Позиция", Строка.Позиция)) Цикл 
				Если ФутбольныйКлубОбъект.СтартовыйСостав.НайтиСтроки(Новый Структура("Футболист", Выборка.Футболист)).Количество() = 0 Тогда
					ЛучшийФутболистНаПозицию = ?(Выборка.Рейтинг > ЛучшийРейтингПозицию, Выборка.Футболист, ЛучшийФутболистНаПозицию);
					ЛучшийРейтингПозицию = Макс(Выборка.Рейтинг, ЛучшийРейтингПозицию);                                                            
				КонецЕсли;
			КонецЦикла;   
			
			// Ищем по группе позиций
			Если Не ЗначениеЗаполнено(ЛучшийФутболистНаПозицию) Тогда
				Выборка = ВыборкаФутбольныйКлуб.Выбрать();
				Пока Выборка.Следующий() Цикл 
					Если ГруппыПоПозициям[Строка.Позиция] = ГруппыПоПозициям[Выборка.Позиция] 
						И ФутбольныйКлубОбъект.СтартовыйСостав.НайтиСтроки(Новый Структура("Футболист", Выборка.Футболист)).Количество() = 0 Тогда
						ЛучшийФутболистНаПозицию = ?(Выборка.Рейтинг > ЛучшийРейтингПозицию, Выборка.Футболист, ЛучшийФутболистНаПозицию);
					КонецЕсли;
				КонецЦикла;   
			КонецЕсли;    
			
			// Ищем полевого игрока / вратаря
			Если Не ЗначениеЗаполнено(ЛучшийФутболистНаПозицию) Тогда
				Выборка = ВыборкаФутбольныйКлуб.Выбрать();
				Пока Выборка.Следующий() Цикл 
					ЭтоВратарь = ГруппыПоПозициям[Строка.Позиция] = "Вратарь";
					Если ЭтоВратарь = ГруппыПоПозициям[Выборка.Позиция] = "Вратарь" 
						И ФутбольныйКлубОбъект.СтартовыйСостав.НайтиСтроки(Новый Структура("Футболист", Выборка.Футболист)).Количество() = 0 Тогда
						ЛучшийФутболистНаПозицию = ?(Выборка.Рейтинг > ЛучшийРейтингПозицию, Выборка.Футболист, ЛучшийФутболистНаПозицию);
						ЛучшийРейтингПозицию = Макс(Выборка.Рейтинг, ЛучшийРейтингПозицию);
					КонецЕсли;
				КонецЦикла;   
			КонецЕсли;    

			// Ищем любого футболиста
			Если Не ЗначениеЗаполнено(ЛучшийФутболистНаПозицию) Тогда
				Выборка = ВыборкаФутбольныйКлуб.Выбрать();
				Пока Выборка.Следующий() Цикл 
					Если ФутбольныйКлубОбъект.СтартовыйСостав.НайтиСтроки(Новый Структура("Футболист", Выборка.Футболист)).Количество() = 0 Тогда
						ЛучшийФутболистНаПозицию = ?(Выборка.Рейтинг > ЛучшийРейтингПозицию, Выборка.Футболист, ЛучшийФутболистНаПозицию); 
						ЛучшийРейтингПозицию = Макс(Выборка.Рейтинг, ЛучшийРейтингПозицию);
					КонецЕсли;
				КонецЦикла;   
			КонецЕсли;    

			Строка.Футболист = ЛучшийФутболистНаПозицию;
			
		КонецЦикла;  
		
		ФутбольныйКлубОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВсеНавыкиФутболистов() Экспорт

	ВсеНавыки = Новый Массив;  
	ВсеНавыки.Добавить("Дриблинг"); 
	ВсеНавыки.Добавить("Завершение");
	ВсеНавыки.Добавить("Пас");
	ВсеНавыки.Добавить("Техника");
	ВсеНавыки.Добавить("ВидениеПоля");
	ВсеНавыки.Добавить("Отбор");
	ВсеНавыки.Добавить("ВыборПозиции");
	ВсеНавыки.Добавить("Скорость");
	ВсеНавыки.Добавить("ИграБезМяча");
	ВсеНавыки.Добавить("Реакция");
	ВсеНавыки.Добавить("ИграРуками");
	ВсеНавыки.Добавить("Опека");
	ВсеНавыки.Добавить("Удар");
	ВсеНавыки.Добавить("ОдинНаОдин"); 
	
	Возврат ВсеНавыки;

КонецФункции

Функция СлучайноеЧисло(МинимальноеЗначение, МаксимальноеЗначение) Экспорт

	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	Возврат ГенераторСлучайныхЧисел.СлучайноеЧисло(МинимальноеЗначение, МаксимальноеЗначение);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьНовыеСезоны()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасписаниеЛиги.Лига КАК Лига,
	                      |	МАКСИМУМ(РасписаниеЛиги.Дата) КАК Дата
	                      |ПОМЕСТИТЬ ВтПоследнийМатчЛиги
	                      |ИЗ
	                      |	РегистрСведений.РасписаниеЛиги КАК РасписаниеЛиги
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РасписаниеЛиги.Лига
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВтПоследнийМатчЛиги.Лига КАК Лига
	                      |ПОМЕСТИТЬ ВтЗавершенныеЛиги
	                      |ИЗ
	                      |	ВтПоследнийМатчЛиги КАК ВтПоследнийМатчЛиги
	                      |ГДЕ
	                      |	ВтПоследнийМатчЛиги.Дата < &ТекущаяИгроваяДата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВтЗавершенныеЛиги.Лига КАК Лига,
	                      |	МАКСИМУМ(РасписаниеЛиги.Сезон.ДатаНачала) КАК ДатаПоследнегоСезона
	                      |ИЗ
	                      |	ВтЗавершенныеЛиги КАК ВтЗавершенныеЛиги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЛиги КАК РасписаниеЛиги
	                      |		ПО ВтЗавершенныеЛиги.Лига = РасписаниеЛиги.Лига
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВтЗавершенныеЛиги.Лига");
	Запрос.УстановитьПараметр("ТекущаяИгроваяДата", Константы.ИгроваяДата.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОткрытьНовыйСезонЛиги(Выборка.Лига, Выборка.ДатаПоследнегоСезона);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьНовыйСезонЛиги(Лига, ДатаПоследнегоСезона)
	
	Сезон = Справочники.Сезоны.НайтиПоРеквизиту("ДатаНачала", ДатаПоследнегоСезона);
	
	ВыборкаТурнирнаяТаблица = ЗапросТурнирнаяТаблица(Лига, Сезон).Выполнить().Выбрать();
	
	ДокументОткрытияСезона = Документы.ОткрытиеСезона.СоздатьДокумент();
	ДокументОткрытияСезона.Дата = Константы.ИгроваяДата.Получить();
	ДокументОткрытияСезона.Лига = Лига;
	ДокументОткрытияСезона.Сезон = НовыйСезон(ДатаПоследнегоСезона);
	
	ФутбольныеКлубы = Новый Массив;
	Пока ВыборкаТурнирнаяТаблица.Следующий() Цикл
		ФутбольныеКлубы.Добавить(ВыборкаТурнирнаяТаблица.ФутбольныйКлуб);
		СтрокаКомандыЛиги = ДокументОткрытияСезона.СоставЛиги.Добавить();
		СтрокаКомандыЛиги.ФутбольныйКлуб = ВыборкаТурнирнаяТаблица.ФутбольныйКлуб;  
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БюджетыФутбольныхКлубовОстатки.ФутбольныйКлуб КАК ФутбольныйКлуб,
	                      |	БюджетыФутбольныхКлубовОстатки.ОбщийБюджетОстаток КАК ОбщийБюджетОстаток,
	                      |	БюджетыФутбольныхКлубовОстатки.ТрансферныйБюджетОстаток КАК ТрансферныйБюджетОстаток
	                      |ИЗ
	                      |	РегистрНакопления.БюджетыФутбольныхКлубов.Остатки(, ФутбольныйКлуб В (&ФутбольныеКлубы)) КАК БюджетыФутбольныхКлубовОстатки");
	Запрос.УстановитьПараметр("ФутбольныеКлубы", ФутбольныеКлубы);
	БюджетыФутбольныхКлубов = Запрос.Выполнить().Выгрузить();
	
	// Вычитаем 90% неиспользованного трансферного бюджета на нужды клуба.
	Для Каждого Строка Из БюджетыФутбольныхКлубов Цикл
		СтрокаБюджета = ДокументОткрытияСезона.БюджетыКлубов.Добавить();
		СтрокаБюджета.ФутбольныйКлуб = Строка.ФутбольныйКлуб; 
		СтрокаБюджета.ТрансферныйБюджет = - Строка.ТрансферныйБюджетОстаток / 100 * 90;    
	КонецЦикла;
	
	Место = 1;    
	ВсегоКомандВЛиге = ВыборкаТурнирнаяТаблица.Количество();
	
	ВыборкаТурнирнаяТаблица.Сбросить();  
	Пока ВыборкаТурнирнаяТаблица.Следующий() Цикл
		
		ОбщийБюджет = БюджетыФутбольныхКлубов.НайтиСтроки(Новый Структура("ФутбольныйКлуб", ВыборкаТурнирнаяТаблица.ФутбольныйКлуб))[0].ОбщийБюджетОстаток;
		
		ПроцентМестаВТурниронойТаблице = Место * 100 / ВсегоКомандВЛиге;
		
		Если ПроцентМестаВТурниронойТаблице <= 5 Тогда
			ПроцентПриростаОбщегоБюджета = 15;
		ИначеЕсли ПроцентМестаВТурниронойТаблице <= 15 Тогда
			ПроцентОтБюджетаНаТрансферы = 10;
		ИначеЕсли ПроцентМестаВТурниронойТаблице <= 30 Тогда  
			ПроцентОтБюджетаНаТрансферы = 5;
		ИначеЕсли ПроцентМестаВТурниронойТаблице <= 45 Тогда 
			ПроцентОтБюджетаНаТрансферы = 0;
		ИначеЕсли ПроцентМестаВТурниронойТаблице <= 60 Тогда 
			ПроцентОтБюджетаНаТрансферы = -5;
		ИначеЕсли ПроцентМестаВТурниронойТаблице <= 75 Тогда
			ПроцентОтБюджетаНаТрансферы = -10;
		ИначеЕсли ПроцентМестаВТурниронойТаблице <= 100 Тогда 
			ПроцентОтБюджетаНаТрансферы = -15;
		КонецЕсли;
		
		ПриростОбщегоБюджета = ОбщийБюджет / 100 * ПроцентОтБюджетаНаТрансферы;
		
		СтрокаБюджета = ДокументОткрытияСезона.БюджетыКлубов.Добавить();
		СтрокаБюджета.ФутбольныйКлуб = ВыборкаТурнирнаяТаблица.ФутбольныйКлуб; 
		СтрокаБюджета.ОбщийБюджет = ПриростОбщегоБюджета;
		СтрокаБюджета.ТрансферныйБюджет = (ОбщийБюджет + ПриростОбщегоБюджета) / 100 * 40;    
		
		Место = Место + 1; 
		
	КонецЦикла;
	
	Документы.ОткрытиеСезона.ОбновитьФутболистов();
	Документы.ОткрытиеСезона.ЗавершитьКарьеруФутболистовИСоздатьРегенов();
	ИгровыеМеханики.ОбновитьСтартовыеСоставыКоманд();
	ДокументОткрытияСезона.РассчитатьТрансфернуюСтоимостьФутболистов();
	
	ДокументОткрытияСезона.Записать(РежимЗаписиДокумента.Проведение);   
	
	Константы.ТекущийСезон.Установить(ДокументОткрытияСезона.Сезон);
			
КонецПроцедуры

Функция НовыйСезон(ДатаПоследнегоСезона)

	СезонОбъект  = Справочники.Сезоны.СоздатьЭлемент();  
	СезонОбъект.ДатаНачала = ДобавитьМесяц(ДатаПоследнегоСезона, 12);
	СезонОбъект.Наименование = СтрШаблон("%1/%2", Формат(СезонОбъект.ДатаНачала, "ДФ=yyyy"), Формат(ДобавитьМесяц(СезонОбъект.ДатаНачала, 12), "ДФ=yy"));
	СезонОбъект.Записать();
	
	Возврат СезонОбъект.Ссылка;

КонецФункции

Функция НавыкиФутбольногоКлуба(Команда)
	
	СуммаНавыков = НоваяСтруктураНавыки();
	ЧастотаПовторенияНавыков = НоваяСтруктураНавыки();

	ВсеНавыки = ВсеНавыкиФутболистов();
	НавыкиПоПозициям = КлючевыеНавыкиПозиций();
	
	ГруппаЗащиты = Новый СписокЗначений;  
	ГруппаЗащиты.Добавить(Перечисления.ИгровыеПозиции.Вратарь);
	ГруппаЗащиты.Добавить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник);
	ГруппаЗащиты.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник);
	ГруппаЗащиты.Добавить(Перечисления.ИгровыеПозиции.ПравыйЗащитник);
	
	ГруппаПолузащиты = Новый СписокЗначений;
	ГруппаПолузащиты.Добавить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник);
	ГруппаПолузащиты.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник);
	ГруппаПолузащиты.Добавить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник); 
	ГруппаПолузащиты.Добавить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник);
	ГруппаПолузащиты.Добавить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник);
	
	ГруппаНападения = Новый СписокЗначений;                    
	ГруппаНападения.Добавить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд);
	ГруппаНападения.Добавить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий);
	ГруппаНападения.Добавить(Перечисления.ИгровыеПозиции.ПравыйИнсайд);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтартовыйСостав.Футболист КАК Футболист,
	                      |	СтартовыйСостав.Позиция КАК Позиция,
	                      |	Футболисты.Дриблинг КАК Дриблинг,
	                      |	Футболисты.Завершение КАК Завершение,
	                      |	Футболисты.Пас КАК Пас,
	                      |	Футболисты.Техника КАК Техника,
	                      |	Футболисты.ВидениеПоля КАК ВидениеПоля,
	                      |	Футболисты.Отбор КАК Отбор,
	                      |	Футболисты.ВыборПозиции КАК ВыборПозиции,
	                      |	Футболисты.Скорость КАК Скорость,
	                      |	Футболисты.ИграБезМяча КАК ИграБезМяча,
	                      |	Футболисты.Реакция КАК Реакция,
	                      |	Футболисты.ИграРуками КАК ИграРуками,
	                      |	Футболисты.Опека КАК Опека,
	                      |	Футболисты.Удар КАК Удар,
	                      |	Футболисты.ОдинНаОдин КАК ОдинНаОдин
	                      |ИЗ
	                      |	Справочник.ФутбольныеКлубы.СтартовыйСостав КАК СтартовыйСостав
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Футболисты КАК Футболисты
	                      |		ПО СтартовыйСостав.Футболист = Футболисты.Ссылка
	                      |ГДЕ
	                      |	СтартовыйСостав.Ссылка = &ФутбольныйКлуб");
	Запрос.УстановитьПараметр("ФутбольныйКлуб", Команда); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НавыкЗащиты = 0; 
	НавыкПолузащиты = 0;
	НавыкНападения = 0;
	КоличествоЗащитников = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Навыки = НавыкиПоПозициям[Выборка.Позиция];
				
		Для Каждого КлючИЗначение Из Навыки Цикл 
			
			Если КлючИЗначение.Значение < 10 Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастотаПовторенияНавыков[КлючИЗначение.Ключ] = ЧастотаПовторенияНавыков[КлючИЗначение.Ключ] + 1;
			СуммаНавыков[КлючИЗначение.Ключ] = СуммаНавыков[КлючИЗначение.Ключ] + Выборка[КлючИЗначение.Ключ];
			
			Если ГруппаЗащиты.НайтиПоЗначению(Выборка.Позиция) <> Неопределено Тогда  
				КоличествоЗащитников = КоличествоЗащитников + 1;
				НавыкЗащиты = НавыкЗащиты + Выборка[КлючИЗначение.Ключ]; 
			ИначеЕсли ГруппаПолузащиты.НайтиПоЗначению(Выборка.Позиция) <> Неопределено Тогда
				НавыкПолузащиты = НавыкПолузащиты + Выборка[КлючИЗначение.Ключ];
			ИначеЕсли ГруппаНападения.НайтиПоЗначению(Выборка.Позиция) <> Неопределено Тогда
				НавыкНападения = НавыкНападения + Выборка[КлючИЗначение.Ключ];
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;  
	
	Для Каждого КлючИЗначение Из СуммаНавыков Цикл
		СуммаНавыков[КлючИЗначение.Ключ] = КлючИЗначение.Значение / ЧастотаПовторенияНавыков[КлючИЗначение.Ключ];
	КонецЦикла;
	
    НавыкиФутбольногоКлуба = Новый Структура;    
	НавыкиФутбольногоКлуба.Вставить("КоличествоЗащитников", КоличествоЗащитников); 
	НавыкиФутбольногоКлуба.Вставить("СуммаНавыков", СуммаНавыков); 
	НавыкиФутбольногоКлуба.Вставить("НавыкЗащиты", НавыкЗащиты); 
	НавыкиФутбольногоКлуба.Вставить("НавыкПолузащиты", НавыкПолузащиты); 
	НавыкиФутбольногоКлуба.Вставить("НавыкНападения", НавыкНападения);
		
	Возврат НавыкиФутбольногоКлуба;	
		
КонецФункции

Функция НоваяСтруктураНавыки()
	
	Навыки = Новый Структура;  
	Навыки.Вставить("Дриблинг", 0); 
	Навыки.Вставить("Завершение", 0);
	Навыки.Вставить("Пас", 0);
	Навыки.Вставить("Техника", 0);
	Навыки.Вставить("ВидениеПоля", 0);
	Навыки.Вставить("Отбор", 0);
	Навыки.Вставить("ВыборПозиции", 0);
	Навыки.Вставить("Скорость", 0);
	Навыки.Вставить("ИграБезМяча", 0);
	Навыки.Вставить("Реакция", 0);
	Навыки.Вставить("ИграРуками", 0);
	Навыки.Вставить("Опека", 0);
	Навыки.Вставить("Удар", 0);
	Навыки.Вставить("ОдинНаОдин", 0);
	
	Возврат Навыки;
	
КонецФункции 

Функция КоэффициентыИгрыКоманды(НавыкиФутбольногоКлуба)
	
	СуммаНавыков = НавыкиФутбольногоКлуба.СуммаНавыков;    
	КоличествоЗащитников = НавыкиФутбольногоКлуба.КоличествоЗащитников;
	КоличествоЗащитниковИВратарь = КоличествоЗащитников + 1;

	НавыкиВратаря = (СуммаНавыков.Реакция 
	+ СуммаНавыков.ИграРуками  
	+ СуммаНавыков.ОдинНаОдин) / 3 * (1 / КоличествоЗащитниковИВратарь);
	
	НавыкиЗащиты = (СуммаНавыков.Отбор    
	+ СуммаНавыков.ВыборПозиции
	+ СуммаНавыков.Опека) / 3 * (КоличествоЗащитников / КоличествоЗащитниковИВратарь);
	
	Разрушение = НавыкиВратаря + НавыкиЗащиты;
	
	Созидание = (СуммаНавыков.Техника 
	+ СуммаНавыков.Скорость 
	+ СуммаНавыков.Пас         
	+ СуммаНавыков.ВыборПозиции
	+ СуммаНавыков.ИграБезМяча 
	+ СуммаНавыков.ВидениеПоля
	+ СуммаНавыков.Дриблинг) / 7;
	
	Завершение = (СуммаНавыков.Завершение 
	+ СуммаНавыков.Скорость 
	+ СуммаНавыков.Техника
	+ СуммаНавыков.Удар 
	+ СуммаНавыков.Дриблинг) / 5;    
				
	Возврат Новый Структура("Разрушение, Созидание, Завершение", 
		Разрушение, Созидание, Завершение);
		
КонецФункции

Процедура СкорректироватьНавыкиКомандыПоТактическойСхеме(ФутбольныйКлуб, КоэффициентыИгрыХозяев)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФутбольныеКлубы.Тактика КАК Тактика
	                      |ИЗ
	                      |	Справочник.ФутбольныеКлубы КАК ФутбольныеКлубы
	                      |ГДЕ
	                      |	ФутбольныеКлубы.Ссылка = &ФутбольныйКлуб");
	Запрос.УстановитьПараметр("ФутбольныйКлуб", ФутбольныйКлуб);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Тактика = Перечисления.ИгровыеТактики.ВсеВАтаке Тогда
		ПриростРазрушения = -15;
		ПриростСозидания  = 20;
		ПриростЗавершения = 5;	
	ИначеЕсли Выборка.Тактика = Перечисления.ИгровыеТактики.Атака Тогда   
		ПриростРазрушения = -5;
		ПриростСозидания  = 5;
		ПриростЗавершения = 0;	
	ИначеЕсли Выборка.Тактика = Перечисления.ИгровыеТактики.Защита Тогда
		ПриростРазрушения = 10;
		ПриростСозидания  = -10;
		ПриростЗавершения = 0;	
	ИначеЕсли Выборка.Тактика = Перечисления.ИгровыеТактики.ВсеВЗащите Тогда 
		ПриростРазрушения = 15;
		ПриростСозидания  = -20;
		ПриростЗавершения = 5;	
	Иначе
		ПриростРазрушения = 0;
		ПриростСозидания  = 0;
		ПриростЗавершения = 0;	
	КонецЕсли;
	
	КоэффициентыИгрыХозяев.Разрушение = КоэффициентыИгрыХозяев.Разрушение + КоэффициентыИгрыХозяев.Разрушение / 100 * ПриростРазрушения;
	КоэффициентыИгрыХозяев.Созидание  = КоэффициентыИгрыХозяев.Созидание  + КоэффициентыИгрыХозяев.Созидание  / 100 * ПриростСозидания;
	КоэффициентыИгрыХозяев.Завершение = КоэффициентыИгрыХозяев.Завершение + КоэффициентыИгрыХозяев.Завершение / 100 * ПриростЗавершения;

КонецПроцедуры

Функция КомандаВладеющаяМячом(Объект, КоэффициентСозиданияХозяев, КоэффициентСозиданияГостей)
	
	БольшийКоэффициентСозидания = Макс(КоэффициентСозиданияХозяев, КоэффициентСозиданияГостей);
	
	КомандаСБольшимКоэффициентомСозидания = ?(КоэффициентСозиданияХозяев > КоэффициентСозиданияГостей, Объект.Хозяева, Объект.Гости);
	КомандаСМеньшимКоэффициентомСозидания = ?(КомандаСБольшимКоэффициентомСозидания = Объект.Хозяева, Объект.Гости, Объект.Хозяева);
	
	ОбщийКоэффициентСозидания = КоэффициентСозиданияХозяев + КоэффициентСозиданияГостей;
	
	СлучайноеЧисло = СлучайноеЧисло(0, ОбщийКоэффициентСозидания);	
	
	Возврат ?(СлучайноеЧисло < БольшийКоэффициентСозидания, КомандаСБольшимКоэффициентомСозидания, КомандаСМеньшимКоэффициентомСозидания);
	
КонецФункции      

Функция СлучайноеДробноеЧисло(МинимальноеЗначение, МаксимальноеЗначение, Степень)
	
	Возврат СлучайноеЧисло(МинимальноеЗначение * Степень, МаксимальноеЗначение * Степень) / Степень;

КонецФункции

Функция ВыбратьАвтораГола(Команда)
	
	АвторГола = Справочники.Футболисты.ПустаяСсылка();
	
	ВероятностьГолаПоПозиции = ВероятностьГолаПоПозиции();  
	
	ИтоговаяВероятность = 0;
	Для Каждого СтрокаИгрока Из Команда.СтартовыйСостав Цикл
		ИтоговаяВероятность = ИтоговаяВероятность + ВероятностьГолаПоПозиции[СтрокаИгрока.Позиция];
	КонецЦикла;   
	
	СлучайноеЧисло = СлучайноеДробноеЧисло(0, ИтоговаяВероятность, 1100);	
	
	НакопленнаяВероятность = 0;
	Для Каждого СтрокаИгрока Из Команда.СтартовыйСостав Цикл			
    	НакопленнаяВероятность = НакопленнаяВероятность + ВероятностьГолаПоПозиции[СтрокаИгрока.Позиция];
		Если СлучайноеЧисло <= НакопленнаяВероятность Тогда 
			АвторГола = СтрокаИгрока.Футболист; 
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат АвторГола;

КонецФункции 

Функция ВыбратьАвтораГолевойПередачи(Команда, АвторГола)
	
	АвторГолевойПередачи = АвторГола;
	
	ВероятностьГолевойПередачиПоПозиции = ВероятностьГолевойПередачиПоПозиции();  
	
	ИтоговаяВероятность = 0;
	Для Каждого СтрокаИгрока Из Команда.СтартовыйСостав Цикл
		ИтоговаяВероятность = ИтоговаяВероятность + ВероятностьГолевойПередачиПоПозиции[СтрокаИгрока.Позиция];
	КонецЦикла;   
	
	Пока АвторГолевойПередачи = АвторГола Цикл 
		
		СлучайноеЧисло = СлучайноеДробноеЧисло(0, ИтоговаяВероятность, 1100);	
		
		НакопленнаяВероятность = 0;
		Для Каждого СтрокаИгрока Из Команда.СтартовыйСостав Цикл			
			НакопленнаяВероятность = НакопленнаяВероятность + ВероятностьГолевойПередачиПоПозиции[СтрокаИгрока.Позиция];
			Если СлучайноеЧисло <= НакопленнаяВероятность Тогда 
				АвторГолевойПередачи = СтрокаИгрока.Футболист;   
				Прервать;
			КонецЕсли;
		КонецЦикла;  
		
	КонецЦикла;
	
	Возврат АвторГолевойПередачи;

КонецФункции

Функция СредняяВероятностьГолаВМинуту()

	Возврат 0.033;

КонецФункции    

Функция ВероятностьГолаПоПозиции()
	
	ВероятностьГолаПоПозиции = Новый Соответствие;
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.Вратарь, 0.001);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник, 0.01);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник, 0.015);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ПравыйЗащитник, 0.01);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник, 0.02);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник, 0.03);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник, 0.05);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник, 0.035);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник, 0.035);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд, 0.06);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ПравыйИнсайд, 0.06);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий, 0.12);
	
	Возврат ВероятностьГолаПоПозиции;

КонецФункции

Функция ВероятностьГолевойПередачиПоПозиции()
	
	ВероятностьГолаПоПозиции = Новый Соответствие;
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.Вратарь, 0.001);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник, 0.02);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник, 0.01);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ПравыйЗащитник, 0.02);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник, 0.03);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник, 0.05);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник, 0.08);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник, 0.06);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник, 0.06);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд, 0.07);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ПравыйИнсайд, 0.07);
	ВероятностьГолаПоПозиции.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий, 0.04);
	
	Возврат ВероятностьГолаПоПозиции;

КонецФункции

Функция ГруппыПоПозициям()
 	
	ГруппыПоПозициям = Новый Соответствие;
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.Вратарь, "Вратарь");  
	
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ЛевыйЗащитник, "Защита");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ПравыйЗащитник, "Защита");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйЗащитник, "Защита");
	
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ОпорныйПолузащитник, "Полузащита");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйПолузащитник, "Полузащита");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.АтакующийПолузащитник, "Полузащита");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ЛевыйПолузащитник, "Полузащита");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ПравыйПолузащитник, "Полузащита");
	
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ЛевыйИнсайд, "Нападение");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ПравыйИнсайд, "Нападение");
	ГруппыПоПозициям.Вставить(Перечисления.ИгровыеПозиции.ЦентральныйНападающий, "Нападение");
	
	Возврат ГруппыПоПозициям;

КонецФункции 

#КонецОбласти

