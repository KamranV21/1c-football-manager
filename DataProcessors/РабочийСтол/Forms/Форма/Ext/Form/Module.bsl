  
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
	ОбновитьДанныеРабочегоСтола();  
	УстановитьУсловноеОформление();     
	
	УстановитьПараметрыДинамическогоСпискаПереговорныйПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СтартИгры" Тогда
		ИнициализироватьФорму();
		ОбновитьДанныеРабочегоСтола();  
		УстановитьУсловноеОформление(); 
	ИначеЕсли ИмяСобытия = "ОбновитьПереговоры" Тогда
		Элементы.ПереговорныйПроцесс.Обновить();
		ОбновитьТрансферныйБюджет();  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ЛигаПриИзменении(Элемент)
	
	ОбновитьТурнирнуюТаблицу();
	ОбновитьТаблицыБомбардировИАссистентов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура СезонПриИзменении(Элемент)

	ОбновитьТурнирнуюТаблицу();
	ОбновитьТаблицыБомбардировИАссистентов(); 

КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийТабличнойЧастиТурнирнаяТаблица

&НаКлиенте
Процедура ТурнирнаяТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТурнирнаяТаблица.ТекущиеДанные;
	
	ПоказатьЗначение(, ТекущиеДанные.ФутбольныйКлуб);
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийТабличнойЧастиУведомления

&НаКлиенте
Процедура УведомленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элементы.Уведомления.ТекущиеДанные.Предмет);	
	
	УдалитьУведомление(Элементы.Уведомления.ТекущиеДанные.Идентификатор); 
	Элементы.Уведомления.Обновить();
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийТабличнойЧастиРасписание

&НаКлиенте
Процедура РасписаниеКомандыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Матч = Элементы.РасписаниеКоманды.ТекущиеДанные.Матч; 
	Если Не ЗначениеЗаполнено(Матч) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Матч);
	ОткрытьФорму("Документ.ФутбольныйМатч.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект, , , , , РежимБлокировкиПриОткрытииОкнаФормы.БлокироватьВладельца);	
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийТабличнойЧастиСписокТрансферы

&НаКлиенте
Процедура ТрансферыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Трансферы.ТекущиеДанные;
	
	ПоказатьЗначение(, ТекущиеДанные.Трансфер);
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РазыгратьИгровойДень(Команда)
	
	Пока Истина Цикл
			
		Если ТекущаяИгроваяДата < ДатаСледующегоМатча Тогда
			
			СимулироватьДействияТекущейИгровойДаты();
			
			Если ЕстьНовыеУведомления() Тогда
				ОбновитьДанныеРабочегоСтола();
				Прервать;
			КонецЕсли;
			
		Иначе
			
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗавершенияРозыгрышаИгровогоДня", ЭтотОбъект);
			
			ОткрытьФорму("Обработка.РабочийСтол.Форма.РозыгрышИгровогоДня", , , , , , ОписаниеОповещенияОЗакрытии, РежимБлокировкиПриОткрытииОкнаФормы.БлокироватьВесьИнтерфейс);	
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Тактика(Команда)
	
	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Ключ", ФутбольныйКлуб);

   ОткрытьФорму("Справочник.ФутбольныеКлубы.Форма.ФормаЭлемента", ПараметрыФормы);
   
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьВсеУведомления(Команда)
	
	ПрочитатьВсеУведомленияНаСервере();   
	Элементы.Уведомления.Обновить();

КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьФорму()
	
	ФутбольныйКлуб = Константы.ФутбольныйКлубМенеджера.Получить();
	Лига = Константы.ЛигаМенеджера.Получить();
	Сезон = Константы.ТекущийСезон.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ОпределиьТекущуюИгровуюДату()

	ТекущаяИгроваяДата = Константы.ИгроваяДата.Получить();	

КонецПроцедуры

&НаСервере
Процедура СимулироватьДействияТекущейИгровойДаты()

	ИгровыеМеханики.СимулироватьДействияТекущейИгровойДаты();
	Элементы.Уведомления.Обновить();
	Элементы.ПереговорныйПроцесс.Обновить();
	ОпределиьТекущуюИгровуюДату();

КонецПроцедуры

&НаСервере
Процедура ОбновитьТурнирнуюТаблицу()
	
	ТурнирнаяТаблица.Очистить();
	
	Запрос = ИгровыеМеханики.ЗапросТурнирнаяТаблица(Лига, Сезон);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Позиция = 1;
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТурнирнаяТаблица.Добавить();  
		СтрокаТаблицы.Позиция = Позиция;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		Позиция = Позиция + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыБомбардировИАссистентов()
	
	Бомбардиры.Очистить();
	Ассистенты.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 20
	                      |	СтатистикаФутболистовОбороты.Футболист КАК Футболист,
	                      |	СтатистикаФутболистовОбороты.ГолыОборот КАК Голы
	                      |ИЗ
	                      |	РегистрНакопления.СтатистикаФутболистов.Обороты(
	                      |			,
	                      |			,
	                      |			,
	                      |			Лига = &Лига
	                      |				И Сезон = &Сезон) КАК СтатистикаФутболистовОбороты
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Голы УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 20
	                      |	СтатистикаФутболистовОбороты.Футболист КАК Футболист,
	                      |	СтатистикаФутболистовОбороты.ГолевыеПередачиОборот КАК ГолевыеПередачи
	                      |ИЗ
	                      |	РегистрНакопления.СтатистикаФутболистов.Обороты(
	                      |			,
	                      |			,
	                      |			,
	                      |			Лига = &Лига
	                      |				И Сезон = &Сезон) КАК СтатистикаФутболистовОбороты
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ГолевыеПередачи УБЫВ");
	Запрос.УстановитьПараметр("Лига", Константы.ЛигаМенеджера.Получить());
	Запрос.УстановитьПараметр("Сезон", Константы.ТекущийСезон.Получить());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаБомбардиры = МассивРезультатов[0].Выбрать();
	Пока ВыборкаБомбардиры.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Бомбардиры.Добавить(), ВыборкаБомбардиры);		
	КонецЦикла;
	
	ВыборкаАссистенты = МассивРезультатов[1].Выбрать();
	Пока ВыборкаАссистенты.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Ассистенты.Добавить(), ВыборкаАссистенты);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТопТрансферов()
	
	СписокТрансферы.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 20
	                      |	ТрансферыОбороты.КлубПродавец КАК КлубПродавец,
	                      |	ТрансферыОбороты.КлубПокупатель КАК КлубПокупатель,
	                      |	ТрансферыОбороты.Футболист КАК Футболист,
	                      |	ТрансферыОбороты.СуммаТрансфераОборот КАК СуммаТрансфера,
	                      |	ТрансферыОбороты.Регистратор КАК Трансфер
	                      |ИЗ
	                      |	РегистрНакопления.Трансферы.Обороты(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -12), &ТекущаяДата, Регистратор, ) КАК ТрансферыОбороты
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	СуммаТрансфера УБЫВ");
	Запрос.УстановитьПараметр("ТекущаяДата", Константы.ИгроваяДата.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СписокТрансферы.Добавить(), Выборка);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусТрансферногоОкна()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Лиги.ТрансферноеОкноОткрыто КАК ТрансферноеОкноОткрыто
	                      |ИЗ
	                      |	Справочник.Лиги КАК Лиги
	                      |ГДЕ
	                      |	Лиги.Ссылка = &Лига");
	Запрос.УстановитьПараметр("Лига", Константы.ЛигаМенеджера.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ТрансферноеОкноОткрыто Тогда
			Элементы.ДекорацияТрансферноеОкно.Заголовок = НСтр("ru = 'Трансферное окно открыто'");    
			Элементы.ДекорацияТрансферноеОкно.ЦветТекста = WebЦвета.Зеленый;
		Иначе
			Элементы.ДекорацияТрансферноеОкно.Заголовок = НСтр("ru = 'Трансферное окно закрыто'");
			Элементы.ДекорацияТрансферноеОкно.ЦветТекста = WebЦвета.ТемноСерый;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьДатуСледующегоМатча()
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	РасписаниеЛиги.Дата КАК Дата
	                      |ИЗ
	                      |	РегистрСведений.РасписаниеЛиги КАК РасписаниеЛиги
	                      |ГДЕ
	                      |	(РасписаниеЛиги.Хозяева = &ФутбольныйКлуб
	                      |			ИЛИ РасписаниеЛиги.Гости = &ФутбольныйКлуб)
	                      |	И РасписаниеЛиги.Дата >= &ТекущаяИгроваяДата");
	Запрос.УстановитьПараметр("ФутбольныйКлуб", ФутбольныйКлуб);
	Запрос.УстановитьПараметр("ТекущаяИгроваяДата", ТекущаяИгроваяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаСледующегоМатча = Выборка.Дата;
	Иначе
		ДатаСледующегоМатча = '00010101';	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыФормы()

	Если ТекущаяИгроваяДата < ДатаСледующегоМатча Тогда
		Элементы.РазыгратьИгровойДень.Заголовок = НСтр("ru = 'Прокрутить до следующего матча'");
	Иначе
		Элементы.РазыгратьИгровойДень.Заголовок = НСтр("ru = 'Разыграть матчи дня'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписание()
	
	РасписаниеКоманды.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА РасписаниеЛиги.Хозяева = &ФутбольныйКлуб
	                      |			ТОГДА ""Д""
	                      |		КОГДА РасписаниеЛиги.Гости = &ФутбольныйКлуб
	                      |			ТОГДА ""Г""
	                      |	КОНЕЦ КАК МестоВстречи,
	                      |	ВЫБОР
	                      |		КОГДА РасписаниеЛиги.Хозяева = &ФутбольныйКлуб
	                      |			ТОГДА РасписаниеЛиги.Гости
	                      |		КОГДА РасписаниеЛиги.Гости = &ФутбольныйКлуб
	                      |			ТОГДА РасписаниеЛиги.Хозяева
	                      |	КОНЕЦ КАК Противник,
	                      |	ЕСТЬNULL(ФутбольныйМатч.Ссылка, ЗНАЧЕНИЕ(Документ.ФутбольныйМатч.ПустаяСсылка)) КАК Матч,
	                      |	ЕСТЬNULL(ФутбольныйМатч.ГолыХозяев, 0) КАК ГолыХозяев,
	                      |	ЕСТЬNULL(ФутбольныйМатч.ГолыГостей, 0) КАК ГолыГостей
	                      |ИЗ
	                      |	РегистрСведений.РасписаниеЛиги КАК РасписаниеЛиги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФутбольныйМатч КАК ФутбольныйМатч
	                      |		ПО РасписаниеЛиги.Лига = ФутбольныйМатч.Лига
	                      |			И РасписаниеЛиги.Сезон = ФутбольныйМатч.Сезон
	                      |			И РасписаниеЛиги.ИгровойДень = ФутбольныйМатч.ИгровойДень
	                      |			И РасписаниеЛиги.Хозяева = ФутбольныйМатч.Хозяева
	                      |			И РасписаниеЛиги.Гости = ФутбольныйМатч.Гости
	                      |ГДЕ
	                      |	(РасписаниеЛиги.Хозяева = &ФутбольныйКлуб
	                      |			ИЛИ РасписаниеЛиги.Гости = &ФутбольныйКлуб)
	                      |	И РасписаниеЛиги.Сезон = &Сезон
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	РасписаниеЛиги.Дата");
	Запрос.УстановитьПараметр("ФутбольныйКлуб", ФутбольныйКлуб);
	Запрос.УстановитьПараметр("Сезон", Константы.ТекущийСезон.Получить());

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРасписания = РасписаниеКоманды.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасписания, Выборка);
		
		Если ЗначениеЗаполнено(СтрокаРасписания.Матч) Тогда
			
			СтрокаРасписания.Счет = СтрШаблон("%1 - %2", Выборка.ГолыХозяев, Выборка.ГолыГостей);
			
			Если СтрокаРасписания.МестоВстречи = "Д" Тогда
				ЗабитоНами = Выборка.ГолыХозяев; 
				ЗабитоПротивником = Выборка.ГолыГостей;
			Иначе
				ЗабитоНами = Выборка.ГолыГостей; 
				ЗабитоПротивником = Выборка.ГолыХозяев;
			КонецЕсли; 
			
			Если ЗабитоНами > ЗабитоПротивником Тогда
				СтрокаРасписания.Результат = Перечисления.РезультатМатча.Победа;	
			ИначеЕсли ЗабитоНами = ЗабитоПротивником Тогда
				СтрокаРасписания.Результат = Перечисления.РезультатМатча.Ничья;	
			Иначе
				СтрокаРасписания.Результат = Перечисления.РезультатМатча.Поражение;	
			КонецЕсли;
			
		Иначе   
			
			СтрокаРасписания.Счет = "-";  
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРозыгрышаИгровогоДня(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПредыдущийСезон = Сезон;
	
	ИнициализироватьФорму();
	ОбновитьДанныеРабочегоСтола();		
	
	Если Сезон <> ПредыдущийСезон Тогда
		ОткрытьФорму("Обработка.РабочийСтол.Форма.ИтогиСезона", Новый Структура("Лига, Сезон", Лига, ПредыдущийСезон));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТрансферныйБюджет()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БюджетыФутбольныхКлубовОстатки.ТрансферныйБюджетОстаток КАК ТрансферныйБюджетОстаток
	                      |ИЗ
	                      |	РегистрНакопления.БюджетыФутбольныхКлубов.Остатки(, ФутбольныйКлуб = &ФутбольныйКлуб) КАК БюджетыФутбольныхКлубовОстатки");
	Запрос.УстановитьПараметр("ФутбольныйКлуб", ФутбольныйКлуб);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ТрансферныйБюджет = Выборка.ТрансферныйБюджетОстаток;
	Иначе
		ТрансферныйБюджет = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРабочегоСтола()
	
	ОпределиьТекущуюИгровуюДату();
	ОпределитьДатуСледующегоМатча();
	ОбновитьТурнирнуюТаблицу();
	ОбновитьТаблицыБомбардировИАссистентов(); 
	ОбновитьРасписание();    
	ОбновитьТаблицуТопТрансферов();
	ОбновитьКомандыФормы();
	ОбновитьСтатусТрансферногоОкна();
	ОбновитьТрансферныйБюджет();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТурнирнаяТаблица.ФутбольныйКлуб");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ФутбольныйКлуб;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТурнирнаяТаблица.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТурнирнаяТаблица.Позиция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТурнирнаяТаблица.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТурнирнаяТаблица.Позиция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТурнирнаяТаблица.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТурнирнаяТаблица.Позиция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТурнирнаяТаблица.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоКоричневый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеКоманды.Результат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатМатча.Победа;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеКоманды.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеКоманды.Результат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатМатча.Поражение;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеКоманды.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеКоманды.Результат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатМатча.Ничья;
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеКоманды.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
КонецПроцедуры

&НаСервере
Функция ЕстьНовыеУведомления()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Уведомления.Идентификатор КАК Идентификатор
	                      |ИЗ
	                      |	РегистрСведений.Уведомления КАК Уведомления
	                      |ГДЕ
	                      |	Уведомления.Дата = &ТекущаяИгроваяДата");
	Запрос.УстановитьПараметр("ТекущаяИгроваяДата", ТекущаяИгроваяДата);  
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаСервере
Процедура УстановитьПараметрыДинамическогоСпискаПереговорныйПроцесс()
	
	ЗначениеПараметраКомпоновкиДанных = ПереговорныйПроцесс.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФутбольныйКлуб"));
	ЗначениеПараметраКомпоновкиДанных.Значение = ФутбольныйКлуб;
    ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьУведомление(Идентификатор)

	Уведомления.УдалитьУведомление(Идентификатор);	

КонецПроцедуры

&НаСервере
Процедура ПрочитатьВсеУведомленияНаСервере()

	Уведомления.УдалитьВсеУведомления();
	
КонецПроцедуры

#КонецОбласти  

