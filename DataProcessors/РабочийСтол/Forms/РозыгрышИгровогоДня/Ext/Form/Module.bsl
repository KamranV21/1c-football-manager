
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УстановитьУсловноеОформление();
	
	ЗаполнитьТаблицуМатчейТекущейДаты();	
	
	Элементы.ДекорацияПодсказка.Видимость = Ложь;
	
КонецПроцедуры
	
#КонецОбласти    

#Область ОбработчикиСобытийТабличнойЧастиМатчиИгрового

&НаКлиенте
Процедура МатчиИгровогоДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатчиИгровогоДня.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Матч) Тогда  
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Матч);
		ОткрытьФорму("Документ.ФутбольныйМатч.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект, , , , ,
			РежимБлокировкиПриОткрытииОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РазыгратьМатчи(Команда) 
	
	РазыгратьМатчиНаСервере(); 
	
	ЗаполнитьТаблицуМатчейТекущейДаты(Истина); 
	
	Элементы.РазыгратьМатчи.Видимость = Ложь;
	Элементы.ДекорацияПодсказка.Видимость = Истина; 
		
КонецПроцедуры

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуМатчейТекущейДаты(ПоказатьСыгранныеМатчи = Ложь)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасписаниеЛиги.Лига КАК Лига,
	                      |	РасписаниеЛиги.Сезон КАК Сезон,
	                      |	РасписаниеЛиги.ИгровойДень КАК ИгровойДень,
	                      |	РасписаниеЛиги.Хозяева КАК Хозяева,
	                      |	РасписаниеЛиги.Гости КАК Гости,
	                      |	ФутбольныйМатч.ГолыХозяев КАК ГолыХозяев,
	                      |	ФутбольныйМатч.ГолыГостей КАК ГолыГостей,
	                      |	ЕСТЬNULL(ФутбольныйМатч.Ссылка, ЗНАЧЕНИЕ(Документ.ФутбольныйМатч.ПустаяСсылка)) КАК Матч
	                      |ИЗ
	                      |	РегистрСведений.РасписаниеЛиги КАК РасписаниеЛиги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФутбольныйМатч КАК ФутбольныйМатч
	                      |		ПО РасписаниеЛиги.Лига = ФутбольныйМатч.Лига
	                      |			И РасписаниеЛиги.Сезон = ФутбольныйМатч.Сезон
	                      |			И РасписаниеЛиги.ИгровойДень = ФутбольныйМатч.ИгровойДень
	                      |			И РасписаниеЛиги.Хозяева = ФутбольныйМатч.Хозяева
	                      |			И РасписаниеЛиги.Гости = ФутбольныйМатч.Гости
	                      |ГДЕ
	                      |	РасписаниеЛиги.Дата = &ТекущаяИгроваяДата
	                      |ИТОГИ ПО
	                      |	Лига");
	Запрос.УстановитьПараметр("ТекущаяИгроваяДата", Константы.ИгроваяДата.Получить() - ?(ПоказатьСыгранныеМатчи, 86400, 0));	
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "МатчиИгровогоДня");
	
КонецПроцедуры

&НаСервере
Процедура РазыгратьМатчиНаСервере()
		
	ИгровыеМеханики.СимулироватьДействияТекущейИгровойДаты(); 
	
	ЗаполнитьТаблицуМатчейТекущейДаты();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатчиИгровогоДня.Хозяева");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Константы.ФутбольныйКлубМенеджера.Получить();
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатчиИгровогоДня.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатчиИгровогоДня.Гости");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Константы.ФутбольныйКлубМенеджера.Получить();
	
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатчиИгровогоДня.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	
КонецПроцедуры

#КонецОбласти  
